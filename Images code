import pandas as pd
import requests
from PIL import Image, UnidentifiedImageError
from io import BytesIO
import re
import os

# Load the Excel file
file_path = 'osint.xlsx'
try:
    data = pd.read_excel(file_path)
except FileNotFoundError:
    print(f"Error: The file {file_path} was not found.")
    exit(1)
except Exception as e:
    print(f"Error loading Excel file: {e}")
    exit(1)

# Function to extract file ID from Google Drive link
def extract_file_id(drive_link):
    try:
        # Match Google Drive file ID in common URL formats
        pattern = r'(?:/d/|id=)([a-zA-Z0-9_-]+)'
        match = re.search(pattern, drive_link)
        if match:
            return match.group(1)
        else:
            print(f"Invalid Google Drive link format: {drive_link}")
            return None
    except Exception as e:
        print(f"Error extracting file ID from {drive_link}: {e}")
        return None

# Function to download file from Google Drive
def download_file_from_google_drive(drive_link):
    file_id = extract_file_id(drive_link)
    if not file_id:
        return None
    
    download_url = f"https://drive.google.com/uc?export=download&id={file_id}"
    headers = {
        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/119.0.0.0 Safari/537.36'
    }
    
    try:
        response = requests.get(download_url, headers=headers, stream=True, timeout=10)
        response.raise_for_status()
        return response.content
    except requests.exceptions.RequestException as e:
        print(f"Failed to download file from Google Drive: {e}")
        return None

# Function to process and save image
def process_image(tool_id, drive_link, folder_name):
    try:
        file_content = download_file_from_google_drive(drive_link)
        if file_content:
            try:
                image_data = BytesIO(file_content)
                img = Image.open(image_data)
                
                if img.mode in ("RGBA", "P"):
                    img = img.convert("RGB")
                
                # Ensure folder exists
                os.makedirs(folder_name, exist_ok=True)
                
                filename = f"{folder_name}/{folder_name}_{tool_id}.jpg"
                img.save(filename, "JPEG", quality=92)
                print(f"Image for Tool ID {tool_id} saved successfully as {filename}")
            except UnidentifiedImageError:
                print(f"Failed to identify image for Tool ID {tool_id}. The file may not be a valid image.")
            except OSError as e:
                print(f"Failed to save image for Tool ID {tool_id}: {e}")
        else:
            print(f"Failed to download image for Tool ID {tool_id} from Google Drive.")
    except Exception as e:
        print(f"An error occurred while processing Tool ID {tool_id}: {e}")

# Define the columns and corresponding folder names based on headers
columns_and_folders = {
    'Tool Logo Image': ('logo', 'logo'),
    'Tool UI Image': ('ui', 'ui'),
    'Demo 1 Image': ('demo1', 'demo1'),
    'Demo 2 Image': ('demo2', 'demo2'),
    'Demo 3 Image': ('demo3', 'demo3'),
}

# Validate that required columns exist
required_columns = ['Tool ID'] + list(columns_and_folders.keys())
missing_columns = [col for col in required_columns if col not in data.columns]
if missing_columns:
    print(f"Error: Missing required columns in Excel file: {missing_columns}")
    exit(1)

# Iterate through each row in the DataFrame
for index, row in data.iterrows():
    tool_id = str(row['Tool ID'])  # Access Tool ID by column name
    
    for column_name, (folder_name, description) in columns_and_folders.items():
        drive_link = row[column_name]
        
        if pd.notna(drive_link) and isinstance(drive_link, str) and drive_link.strip():
            process_image(tool_id, drive_link, folder_name)
        else:
            print(f"No valid link found for {description} of Tool ID {tool_id}.")